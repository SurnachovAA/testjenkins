import org.apache.commons.io.FilenameUtils
import com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition

node {
    def buildFolderPath = FilenameUtils.separatorsToUnix("${JENKINS_HOME}/cardsBuild")
    def configuration = readProps( "${buildFolderPath}/supervisor/configuration.json")

    def repositories = ""
    for(int i = 0; i < configuration.repositories.length(); i++){
        repositories+= configuration.repositories[i];
    }

    def repositoriesParameter = new ExtendedChoiceParameterDefinition(
        "repositories",
        "PT_CHECKBOX",
        repositories,
        null,//project name
        null,
        null,
        null,
        null,// bindings
        null,
        null, // propertykey
        "", //default value
        null,
        null,
        null,
        null, //default bindings
        null,
        null,
        null, //descriptionPropertyValue
        null,
        null,
        null,
        null,
        null,
        null,
        null,// javascript file
        null, // javascript
        false, // save json param to file
        false, // quote
        10, // visible item count
        "",
        ","
    )
	properties([
        parameters([
            choice(choices: 'dev\ntest\nprod', description: 'The target environment', name: 'env'),
            stringParam(
                 defaultValue: 'master',
                 description: '',
                 name: 'branch'
               ),
            repositoriesParameter
        ])
	])

    print "params branch:" +params.env
	print "params branch:" +params.branch
    print "params repositories:" +params.repositories

    def paramRepositories = params.repositories.split("\\,")

   def tasksBuildService = [:]
   def tasksDeployService = [:]
   def tasksUploadingConfiguration = [:]
   def tasksUpdatingSupervisor = [:]
   configuration.envs.each { envir ->
        print envir.name
        print params.env
       if (envir.name == params.env) {
           Set usedServers = []
           envir.servers.each { server ->
    			server.repositories.each{repository ->
				    def isFind = paramRepositories.findAll{repository.toLowerCase().contains(it.toLowerCase())}.any{true}
				    isFind = isFind && paramRepositories.findAll{it.toLowerCase().contains(repository.toLowerCase())}.any{true}
				    isFind = isFind || paramRepositories.findAll{'all'.toLowerCase().contains(it.toLowerCase())}.any{true}
				    print repository +" isFind = "+ isFind
					if (isFind){
					    usedServers.add(server.name)
						tasksBuildService["${server.name}:${repository}"] = {
							print "build service ${server.name} ${repository} ${params.branch}"

							def includedJob = build job: "build_${repository}", parameters: [
								string(name: "branch", value: params.branch)
							]
							println includedJob.rawBuild.log
						}
						tasksDeployService["${server.name}:${repository}"] = {
							print "deploy service ${server.name} ${repository}"

							sh "ssh -p 22222 techuser@${server.name}.open.ru supervisorctl stop ${repository}"
            				sh "ssh -p 22222 techuser@${server.name}.open.ru mkdir -p /var/www/jars/${repository}"
            				sh "scp -P 22222 ${buildFolderPath}/${repository}/*.jar techuser@${server.name}.open.ru:/var/www/jars/${repository}"
            				sh "ssh -p 22222 techuser@${server.name}.open.ru supervisorctl update ${repository}"
            				sh "ssh -p 22222 techuser@${server.name}.open.ru supervisorctl start ${repository}"
						}
					}
				}
           }
           usedServers.each { serverName ->
                tasksUploadingConfiguration["${serverName}"] = {
                        sh "scp -P 22222 -r ${buildFolderPath}/supervisor/${params.env}/${serverName}/* techuser@${serverName}.open.ru:/var/www/conf/"
                    }
                tasksUpdatingSupervisor["${serverName}"] = {
    					sh "ssh -p 22222 techuser@${serverName}.open.ru supervisorctl reread"
    				}
           }

       }
   }

   stage("building services") {
        parallel tasksBuildService
    }

   stage("uploading configuration") {
        parallel tasksUploadingConfiguration
    }

    stage("updating supervisor") {
        parallel tasksUpdatingSupervisor
    }

    stage("deploying services") {
        parallel tasksDeployService
    }

}

def readProps(buildJsonPath){
    touch buildJsonPath
    def result = readJSON file: buildJsonPath
    return result

}
